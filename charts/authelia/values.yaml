authelia:
  image:
    registry: ghcr.io
    repository: authelia/authelia
    tag: "4.39.1"
    pullPolicy: IfNotPresent
    pullSecrets: []

  annotations: {}
  labels: {}

  rbac:
    enabled: true
    serviceAccountName: "authelia"

  service:
    type: "ClusterIP"
    annotations: {}
    labels: {}
    port: 80
    nodePort: 30091

  ingress:
    enabled: true
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.middlewares: traefik-http-redirect@kubernetescrd
      traefik.ingress.kubernetes.io/router.tls: "true"
      cert-manager.io/cluster-issuer: letsencrypt-production

    ## A discouraged override list of hosts to create the ingress for. If this is not specified the auto-generation
    ## characteristics of the 'configMap.session.cookies' value are not used. Should be a list of host/path pairs.
    rulesOverride: []
    certManager: false
    rewriteTarget: false
    tls:
      enabled: true
      secret: "authelia-cert"

    traefikCRD:
      enabled: true
      ## Use a standard Ingress object, not an IngressRoute.
      disableIngressRoute: false

      # matchOverride: Host(`auth.example.com`) && PathPrefix(`/`)

      ## The TraefikCRD apiVersion Overrides. The apiGroupOverride controls the first part, apiVersionOverride controls
      ## the second.
      # apiGroupOverride: 'traefik.io'
      # apiVersionOverride: 'v1alpha1'

      entryPoints:
        - "websecure"

      # priority: 10

      # weight: 10

      sticky: false

      # stickyCookieNameOverride: 'authelia_traefik_lb'

      # strategy: 'RoundRobin'

      # responseForwardingFlushInterval: '100ms'

      middlewares:
        auth:
          # nameOverride: 'authelia-auth'

          ## Overrides the endpoint used for the middleware. This is the portion of the endpoint after '/api/authz/'.
          endpointOverride: ""

          authResponseHeaders:
            - "Remote-User"
            - "Remote-Name"
            - "Remote-Email"
            - "Remote-Groups"

        chains:
          auth:
            # nameOverride: 'authelia-auth-chain'

            # List of Middlewares to apply before the forwardAuth Middleware in the authentication chain.
            before: []
            # before:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

            # List of Middlewares to apply after the forwardAuth Middleware in the authentication chain.
            after: []
            # after:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

          ingressRoute:
            # List of Middlewares to apply before the middleware in the IngressRoute chain.
            before: []
            # before:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

            # List of Middlewares to apply after the middleware in the IngressRoute chain.
            after: []
            # after:
            # - name: 'extra-middleware-name'
            #   namespace: 'default'

      # Specific options for the TraefikCRD TLS configuration. The above TLS section is still used.
      tls:
        ## Disables inclusion of the IngressRoute TLSOptions.
        disableTLSOptions: false
        #   existingOptions:
        #     name: 'default-traefik-options'
        #     namespace: 'default'
        certResolver: ""
        domainsOverride: []
        # domainsOverride:
        #   - main: 'auth.example.com'
        #     sans:
        #       - 'a.example.com'

        options:
          # nameOverride: 'authelia-tls-options'
          nameOverride: ""

          minVersion: "VersionTLS12"
          maxVersion: "VersionTLS13"
          sniStrict: false
          cipherSuites:
            - "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
            - "TLS_RSA_WITH_AES_256_GCM_SHA384"
          curvePreferences: []
          # curvePreferences:
          # - 'CurveP521'
          # - 'CurveP384'

  pod:
    env:
      - name: TZ
        value: Europe/Berlin

  configMap:
    server:
      endpoints:
        authz:
          forward-auth:
            implementation: "ForwardAuth"

    log:
      level: "info"
      format: "text"
      file_path: ""

    default_2fa_method: ""
    theme: "dark"

    authentication_backend:
      ldap:
        enabled: true
        implementation: "custom"
        address: "ldap://lldap-ldap.lldap.svc.cluster.local:3890"
        base_dn: "DC=matthiasstein,DC=net"
        additional_users_dn: "ou=people"
        # To allow sign in both with username and email, one can use a filter like
        # (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
        users_filter: "(&({username_attribute}={input})(objectClass=person))"
        # Set this to ou=groups, because all groups are stored in this ou
        additional_groups_dn: ou=groups
        # The groups are not displayed in the UI, but this filter works.
        groups_filter: "(member={dn})"
        user: "uid=svc_authelia,ou=people,dc=matthiasstein,dc=net"
        attributes:
          display_name: displayName
          username: uid
          group_name: cn
          mail: mail
    password_policy:
      standard:
        enabled: false
        min_length: 8
        max_length: 0
        require_uppercase: false
        require_lowercase: false
        require_number: false
        require_special: false
      ## zxcvbn is a well known and used password strength algorithm. It does not have tunable settings.
      zxcvbn:
        enabled: false
        min_score: 0

    access_control:
      default_policy: deny
      networks:
        - name: private
          networks:
            - 10.0.0.0/8
            - 192.168.10.0/24
      rules:
        - domain: homeassistant.matthiasstein.net
          policy: bypass
          networks:
            - private
        - domain:
            - "*.matthiasstein.net"
            - matthiasstein.net
          policy: two_factor

    session:
      name: "authelia_session"
      same_site: "lax"
      expiration: "1 day"
      inactivity: "5 minutes"
      remember_me: "1 month"
      cookies:
        - domain: "matthiasstein.net"
          subdomain: "auth"
          default_redirection_url: "https://matthiasstein.net"
      redis:
        host: authelia-redis-headless
        enabled: true
        deploy: true
        enabledSecret: false

    regulation:
      max_retries: 3
      find_time: "2 minutes"
      ban_time: "5 minutes"

    storage:
      postgres:
        address: authelia-postgresql-hl
        enabled: true
        deploy: true

    notifier:
      disable_startup_check: false
      smtp:
        enabled: true
        enabledSecret: true
        address: "smtp://w01edb35.kasserver.com:587"
        sender: "Authelia <do-no-reply@matthiasstein.net>"
        subject: "[Authelia] {title}"
        username: "m073cb8d"

    identity_providers:
      oidc:
        enabled: false
        lifespans:
          access_token: "1 hour"
          authorize_code: "1 minute"
          id_token: "1 hour"
          refresh_token: "1 hour and 30 minutes"

  secret:
    disabled: false
    existingSecret: "authelia"
    mountPath: "/secrets"

  persistence:
    enabled: false
    readOnly: false
    subPath: ""
    existingClaim: ""
    storageClass: ""
    volumeName: ""
    accessModes:
      - "ReadWriteOnce"
    size: "100Mi"
    selector: {}

  postgresql:
    auth:
      username: authelia
      database: authelia
    primary:
      persistence:
        enabled: true

        size: 1Gi
  redis:
    architecture: standalone
    auth:
      enabled: false
      existingSecret: authelia
      secretKeys:
        userPasswordKey: session.redis.password.txt
    master:
      resources: {}
      priorityClassName: ""
      persistence:
        enabled: true

        accessModes:
          - ReadWriteOnce
        size: 1Gi
    replica:
      replicaCount: 3
      resources: {}
      priorityClassName: ""
      persistence:
        enabled: true

        accessModes:
          - ReadWriteOnce
        size: 1Gi
